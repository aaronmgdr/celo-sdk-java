package org.celo.contractkit.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint128;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.6.1.
 */
@SuppressWarnings("rawtypes")
public class Reserve extends Contract {
    public static final String BINARY = "0x6080604052600062000016620000c260201b60201c565b9050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3506001600281905550620000ca565b600033905090565b6153dd80620000da6000396000f3fe6080604052600436106102c95760003560e01c80638438796a11610175578063aa6ca808116100dc578063e50a6c1e11610095578063e83b373b1161006f578063e83b373b146111f7578063ec4f797b1461123c578063f2fde38b1461128b578063fa9ed95a146112dc576102c9565b8063e50a6c1e146110ff578063e6b76e9c1461116b578063e7e31e7a146111a6576102c9565b8063aa6ca80814610e40578063ad62ad1014610eac578063ca56d33b14610ee7578063d48bfca714611040578063e30f579d146110a9578063e33a88e7146110d4576102c9565b80638f32d59b1161012e5780638f32d59b14610b785780639a206ece14610ba75780639c3e2f0f14610c10578063a1ab55b314610c7c578063a3e1f00d14610cb7578063a91ee0dc14610def576102c9565b80638438796a146109e3578063894098d614610a4f5780638b7df8d414610a7a5780638ce5877c14610aa55780638d9a5e6f14610af65780638da5cb5b14610b21576102c9565b806339d7f76e11610234578063715018a6116101ed5780637897a78e116101c75780637897a78e146108cd5780637b103999146108f85780637b5220751461094f57806381b861a6146109b8576102c9565b8063715018a614610860578063765c1fe91461087757806376769a60146108a2576102c9565b806339d7f76e146106b157806340899365146106dc57806354255be01461075757806356b6d0d5146107975780635c4a3145146107c25780637090db4e14610835576102c9565b806317f9a6f71161028657806317f9a6f71461049557806319f37361146104c75780631c39c7d51461053057806322015968146105a357806322796e831461060c5780632aa1c16d14610686576102c9565b806301da32bd146102cb57806303a0fea31461030657806303d835f3146103795780630db279be146103a457806313baf1e6146103f3578063158ef93e14610466575b005b3480156102d757600080fd5b50610304600480360360208110156102ee57600080fd5b8101908080359060200190929190505050611307565b005b34801561031257600080fd5b5061035f6004803603604081101561032957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611458565b604051808215151515815260200191505060405180910390f35b34801561038557600080fd5b5061038e611602565b6040518082815260200191505060405180910390f35b3480156103b057600080fd5b506103dd600480360360208110156103c757600080fd5b8101908080359060200190929190505050611608565b6040518082815260200191505060405180910390f35b3480156103ff57600080fd5b5061044c6004803603604081101561041657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611629565b604051808215151515815260200191505060405180910390f35b34801561047257600080fd5b5061047b6119b3565b604051808215151515815260200191505060405180910390f35b3480156104a157600080fd5b506104aa6119c6565b604051808381526020018281526020019250505060405180910390f35b3480156104d357600080fd5b50610516600480360360208110156104ea57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611b7c565b604051808215151515815260200191505060405180910390f35b34801561053c57600080fd5b506105896004803603604081101561055357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611b9c565b604051808215151515815260200191505060405180910390f35b3480156105af57600080fd5b506105f2600480360360208110156105c657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611df7565b604051808215151515815260200191505060405180910390f35b34801561061857600080fd5b506106216120cd565b60405180836fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152602001826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020019250505060405180910390f35b34801561069257600080fd5b5061069b612117565b6040518082815260200191505060405180910390f35b3480156106bd57600080fd5b506106c661219b565b6040518082815260200191505060405180910390f35b3480156106e857600080fd5b50610715600480360360208110156106ff57600080fd5b81019080803590602001909291905050506121a1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561076357600080fd5b5061076c6121dd565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390f35b3480156107a357600080fd5b506107ac612204565b6040518082815260200191505060405180910390f35b3480156107ce57600080fd5b5061081b600480360360408110156107e557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506125d0565b604051808215151515815260200191505060405180910390f35b34801561084157600080fd5b5061084a612958565b6040518082815260200191505060405180910390f35b34801561086c57600080fd5b5061087561295e565b005b34801561088357600080fd5b5061088c612a97565b6040518082815260200191505060405180910390f35b3480156108ae57600080fd5b506108b7612b37565b6040518082815260200191505060405180910390f35b3480156108d957600080fd5b506108e2612b3d565b6040518082815260200191505060405180910390f35b34801561090457600080fd5b5061090d612b63565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561095b57600080fd5b5061099e6004803603602081101561097257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612b89565b604051808215151515815260200191505060405180910390f35b3480156109c457600080fd5b506109cd612ba9565b6040518082815260200191505060405180910390f35b3480156109ef57600080fd5b506109f8612baf565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610a3b578082015181840152602081019050610a20565b505050509050019250505060405180910390f35b348015610a5b57600080fd5b50610a64612c07565b6040518082815260200191505060405180910390f35b348015610a8657600080fd5b50610a8f612c0d565b6040518082815260200191505060405180910390f35b348015610ab157600080fd5b50610af460048036036020811015610ac857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612c35565b005b348015610b0257600080fd5b50610b0b612d4d565b6040518082815260200191505060405180910390f35b348015610b2d57600080fd5b50610b36612d6e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610b8457600080fd5b50610b8d612d97565b604051808215151515815260200191505060405180910390f35b348015610bb357600080fd5b50610bf660048036036020811015610bca57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612df5565b604051808215151515815260200191505060405180910390f35b348015610c1c57600080fd5b50610c25612e15565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610c68578082015181840152602081019050610c4d565b505050509050019250505060405180910390f35b348015610c8857600080fd5b50610cb560048036036020811015610c9f57600080fd5b8101908080359060200190929190505050612ea3565b005b348015610cc357600080fd5b50610ded6004803603610120811015610cdb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803590602001909291908035906020019092919080359060200190640100000000811115610d4057600080fd5b820183602082011115610d5257600080fd5b80359060200191846020830284011164010000000083111715610d7457600080fd5b909192939192939080359060200190640100000000811115610d9557600080fd5b820183602082011115610da757600080fd5b80359060200191846020830284011164010000000083111715610dc957600080fd5b90919293919293908035906020019092919080359060200190929190505050612fd4565b005b348015610dfb57600080fd5b50610e3e60048036036020811015610e1257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061314b565b005b348015610e4c57600080fd5b50610e556132ef565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610e98578082015181840152602081019050610e7d565b505050509050019250505060405180910390f35b348015610eb857600080fd5b50610ee560048036036020811015610ecf57600080fd5b810190808035906020019092919050505061337d565b005b348015610ef357600080fd5b5061103e60048036036040811015610f0a57600080fd5b8101908080359060200190640100000000811115610f2757600080fd5b820183602082011115610f3957600080fd5b80359060200191846020830284011164010000000083111715610f5b57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610fbb57600080fd5b820183602082011115610fcd57600080fd5b80359060200191846020830284011164010000000083111715610fef57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050613438565b005b34801561104c57600080fd5b5061108f6004803603602081101561106357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506138f0565b604051808215151515815260200191505060405180910390f35b3480156110b557600080fd5b506110be613e09565b6040518082815260200191505060405180910390f35b3480156110e057600080fd5b506110e9613e44565b6040518082815260200191505060405180910390f35b34801561110b57600080fd5b50611114613e4a565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561115757808201518184015260208101905061113c565b505050509050019250505060405180910390f35b34801561117757600080fd5b506111a46004803603602081101561118e57600080fd5b8101908080359060200190929190505050613efd565b005b3480156111b257600080fd5b506111f5600480360360208110156111c957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061402f565b005b34801561120357600080fd5b5061123a6004803603604081101561121a57600080fd5b810190808035906020019092919080359060200190929190505050614147565b005b34801561124857600080fd5b506112756004803603602081101561125f57600080fd5b810190808035906020019092919050505061425c565b6040518082815260200191505060405180910390f35b34801561129757600080fd5b506112da600480360360208110156112ae57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614274565b005b3480156112e857600080fd5b506112f16142fa565b6040518082815260200191505060405180910390f35b61130f612d97565b611381576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b61138a81614300565b6010600082015181600001559050506113c96113a461431e565b601060405180602001604052908160008201548152505061434490919063ffffffff16565b61141e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806153036026913960400191505060405180910390fd5b7fb08f0607338ad77f5b08ccf831e533cefcc2d373c173e87a8f61144f1d82be1e816040518082815260200191505060405180910390a150565b600060405160200180807f45786368616e67650000000000000000000000000000000000000000000000008152506008019050604051602081830303815290604052805190602001203373ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dcf0aaed836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561152b57600080fd5b505afa15801561153f573d6000803e3d6000fd5b505050506040513d602081101561155557600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16146115ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f6f6e6c79207265676973746572656420636f6e7472616374000000000000000081525060200191505060405180910390fd5b6115f9848461435a565b91505092915050565b60115481565b600c818154811061161557fe5b906000526020600020016000915090505481565b6000611633612d97565b6116a5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b82600360008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611765576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f746f6b656e206164647220776173206e6576657220726567697374657265640081525060200191505060405180910390fd5b600480549050831080156117db57508373ffffffffffffffffffffffffffffffffffffffff166004848154811061179857fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b611830576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180615329602a913960400191505060405180910390fd5b6000600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600060046118a5600160048054905061448f90919063ffffffff16565b815481106118af57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600485815481106118ea57fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061194b600160048054905061448f90919063ffffffff16565b6004816119589190615140565b508473ffffffffffffffffffffffffffffffffffffffff167fbe9bb4bdca0a094babd75e3a98b1d2e2390633430d0a2f6e2b9970e2ee03fb2e856040518082815260200191505060405180910390a260019250505092915050565b600060149054906101000a900460ff1681565b600080600160026000828254019250508190555060006002549050600654611a2a600560000160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff164261448f90919063ffffffff16565b1115611ab857611a40611a3b6144d9565b614541565b600560000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555042600560000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b600560000160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16611afc611af761431e565b614541565b925092506002548114611b77576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f7265656e7472616e742063616c6c00000000000000000000000000000000000081525060200191505060405180910390fd5b509091565b60036020528060005260406000206000915054906101000a900460ff1681565b6000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611c40576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c81526020018061537d602c913960400191505060405180910390fd5b600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611ce2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180615353602a913960400191505060405180910390fd5b6000620151804281611cf057fe5b049050600e54811115611d51576000611d07612c0d565b905081600e81905550611d49611d44611d1f8361454f565b60106040518060200160405290816000820154815250506145d990919063ffffffff16565b614a38565b600f81905550505b82600f541015611dc9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f457863656564696e67207370656e64696e67206c696d6974000000000000000081525060200191505060405180910390fd5b611dde83600f5461448f90919063ffffffff16565b600f81905550611dee848461435a565b91505092915050565b6000611e01612d97565b611e73576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600160026000828254019250508190555060006002549050600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611f4b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f72657365727665206164647220616c726561647920616464656400000000000081525060200191505060405180910390fd5b6001600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600b8390806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508273ffffffffffffffffffffffffffffffffffffffff167fd78793225285ecf9cf5f0f84b1cdc335c2cb4d6810ff0b9fd156ad6026c89cea60405160405180910390a26001915060025481146120c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f7265656e7472616e742063616c6c00000000000000000000000000000000000081525060200191505060405180910390fd5b50919050565b60058060000160009054906101000a90046fffffffffffffffffffffffffffffffff16908060000160109054906101000a90046fffffffffffffffffffffffffffffffff16905082565b60008062015180428161212657fe5b04905060006121406012548361448f90919063ffffffff16565b9050601354811061215657600092505050612198565b61219361218260135461217484601154614a5990919063ffffffff16565b614adf90919063ffffffff16565b60115461448f90919063ffffffff16565b925050505b90565b600f5481565b600b81815481106121ae57fe5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008060018060016000839350829250819150809050935093509350935090919293565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dcf0aaed60405160200180807f536f727465644f7261636c657300000000000000000000000000000000000000815250600d019050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156122c057600080fd5b505afa1580156122d4573d6000803e3d6000fd5b505050506040513d60208110156122ea57600080fd5b810190808051906020019092919050505090506000819050600061230c612c0d565b9050600080905061231b61516c565b612357600d60007f63474c4400000000000000000000000000000000000000000000000000000000815260200190815260200160002054614300565b905060008090505b600480549050811015612588576000808673ffffffffffffffffffffffffffffffffffffffff1663ef90e1b06004858154811061239857fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050604080518083038186803b15801561242257600080fd5b505afa158015612436573d6000803e3d6000fd5b505050506040513d604081101561244c57600080fd5b810190808051906020019092919080519060200190929190505050809250819350505060006004848154811061247e57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156124ee57600080fd5b505afa158015612502573d6000803e3d6000fd5b505050506040513d602081101561251857600080fd5b810190808051906020019092919050505090506000612552846125448585614a5990919063ffffffff16565b614adf90919063ffffffff16565b90506125678188614b2990919063ffffffff16565b965050505050612581600182614b2990919063ffffffff16565b905061235f565b506125c66125c16125988461454f565b6125b3846125a58861454f565b614bb190919063ffffffff16565b614bb190919063ffffffff16565b614541565b9550505050505090565b60006125da612d97565b61264c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661270b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f72657365727665206164647220776173206e657665722061646465640000000081525060200191505060405180910390fd5b600b805490508210801561278157508273ffffffffffffffffffffffffffffffffffffffff16600b838154811061273e57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b6127d6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602d8152602001806152d6602d913960400191505060405180910390fd5b6000600a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600b61284b6001600b8054905061448f90919063ffffffff16565b8154811061285557fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600b848154811061289057fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506128f16001600b8054905061448f90919063ffffffff16565b600b816128fe9190615140565b508373ffffffffffffffffffffffffffffffffffffffff167f89b4ee5cecfdfb246ede373c10283b5038afe56a531fc1d2f3ed8c5507a52fcb846040518082815260200191505060405180910390a2600191505092915050565b60135481565b612966612d97565b6129d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000806000905060008090505b600b80549050811015612b2f57612b12600b8281548110612ac157fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163183614b2990919063ffffffff16565b9150612b28600182614b2990919063ffffffff16565b9050612aa4565b508091505090565b60085481565b6000612b5e6010604051806020016040529081600082015481525050614541565b905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a6020528060005260406000206000915054906101000a900460ff1681565b60125481565b6060600c805480602002602001604051908101604052809291908181526020018280548015612bfd57602002820191906000526020600020905b815481526020019060010190808311612be9575b5050505050905090565b60075481565b6000612c30612c1a612a97565b612c22613e09565b614b2990919063ffffffff16565b905090565b612c3d612d97565b612caf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167fab8cff50266d80b9c9d9703af934ca455b9218286bf4fcaa05653a564c499e4b60405160405180910390a250565b6000612d69612d5a612a97565b47614b2990919063ffffffff16565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16612dd9614cfa565b73ffffffffffffffffffffffffffffffffffffffff1614905090565b60096020528060005260406000206000915054906101000a900460ff1681565b6060600b805480602002602001604051908101604052809291908181526020018280548015612e9957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311612e4f575b5050505050905090565b612eab612d97565b612f1d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b60008111612f93576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f76616c756520776173207a65726f00000000000000000000000000000000000081525060200191505060405180910390fd5b806006819055507f7bfe94ca3147f135fcd6d94ebf61d33fa34fbe904f933ccae66911b9548544f2816040518082815260200191505060405180910390a150565b600060149054906101000a900460ff1615613057576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f636f6e747261637420616c726561647920696e697469616c697a65640000000081525060200191505060405180910390fd5b6001600060146101000a81548160ff02191690831515021790555061307b33614d02565b6130848b61314b565b61308d8a612ea3565b61309689611307565b6130a08888614147565b61312c868680806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050858580806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050613438565b61313582613efd565b61313e8161337d565b5050505050505050505050565b613153612d97565b6131c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613268576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f43616e6e6f7420726567697374657220746865206e756c6c206164647265737381525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f27fe5f0c1c3b1ed427cc63d0f05759ffdecf9aec9e18d31ef366fc8a6cb5dc3b60405160405180910390a250565b6060600480548060200260200160405190810160405280929190818152602001828054801561337357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311613329575b5050505050905090565b613385612d97565b6133f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b806008819055507f4da8e8b2223fbbb897200fb9dfb6b986c1b4188621114d407ee8ec363569fc37816040518082815260200191505060405180910390a150565b613440612d97565b6134b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b8051825114613529576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f4172726179206c656e677468206d69736d61746368000000000000000000000081525060200191505060405180910390fd5b61353161516c565b61353b6000614300565b905060008090505b82518110156135975761357a61356b84838151811061355e57fe5b6020026020010151614300565b83614e4690919063ffffffff16565b9150613590600182614b2990919063ffffffff16565b9050613543565b506135b26135a361431e565b82614eef90919063ffffffff16565b613607576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806152946021913960400191505060405180910390fd5b60008090505b600c8054905081101561366357600d6000600c838154811061362b57fe5b906000526020600020015481526020019081526020016000206000905561365c600182614b2990919063ffffffff16565b905061360d565b5082600c908051906020019061367a92919061517f565b5060008090505b835181101561377f576000600d600086848151811061369c57fe5b602002602001015181526020019081526020016000205414613726576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260178152602001807f43616e6e6f74207365742077656967687420747769636500000000000000000081525060200191505060405180910390fd5b82818151811061373257fe5b6020026020010151600d600086848151811061374a57fe5b6020026020010151815260200190815260200160002081905550613778600182614b2990919063ffffffff16565b9050613681565b506000600d60007f63474c4400000000000000000000000000000000000000000000000000000000815260200190815260200160002054141561382a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f4d757374207365742063474c442061737365742077656967687400000000000081525060200191505060405180910390fd5b7f55b488abd19ae7621712324d3d42c2ef7a9575f64f5503103286a1161fb408558383604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b83811015613894578082015181840152602081019050613879565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156138d65780820151818401526020810190506138bb565b5050505090500194505050505060405180910390a1505050565b60006138fa612d97565b61396c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600160026000828254019250508190555060006002549050600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615613a44576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f746f6b656e206164647220616c7265616479207265676973746572656400000081525060200191505060405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dcf0aaed60405160200180807f536f727465644f7261636c657300000000000000000000000000000000000000815250600d019050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015613aff57600080fd5b505afa158015613b13573d6000803e3d6000fd5b505050506040513d6020811015613b2957600080fd5b8101908080519060200190929190505050905060008190506000808273ffffffffffffffffffffffffffffffffffffffff1663ef90e1b0886040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050604080518083038186803b158015613bc057600080fd5b505afa158015613bd4573d6000803e3d6000fd5b505050506040513d6040811015613bea57600080fd5b810190808051906020019092919080519060200190929190505050809250819350505060008111613c83576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f6d656469616e20726174652072657475726e6564203020676f6c64000000000081525060200191505060405180910390fd5b6001600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060048790806001815401808255809150509060018203906000526020600020016000909192909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550508673ffffffffffffffffffffffffffffffffffffffff167f784c8f4dbf0ffedd6e72c76501c545a70f8b203b30a26ce542bf92ba87c248a460405160405180910390a260019550505050506002548114613e03576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f7265656e7472616e742063616c6c00000000000000000000000000000000000081525060200191505060405180910390fd5b50919050565b6000804790506000613e19612117565b9050808211613e29576000613e3d565b613e3c818361448f90919063ffffffff16565b5b9250505090565b60065481565b606080600c80549050604051908082528060200260200182016040528015613e815781602001602082028038833980820191505090505b50905060008090505b600c80549050811015613ef557600d6000600c8381548110613ea857fe5b9060005260206000200154815260200190815260200160002054828281518110613ece57fe5b602002602001018181525050613eee600182614b2990919063ffffffff16565b9050613e8a565b508091505090565b613f05612d97565b613f77576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b613f99613f8261431e565b613f8b83614300565b61434490919063ffffffff16565b613fee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602181526020018061523d6021913960400191505060405180910390fd5b806007819055507ffe69856ffb1b1d6cb00c1d8151726e6e95032b1666282eeb293ecadd58b29a6e816040518082815260200191505060405180910390a150565b614037612d97565b6140a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6001600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167f3139419c41cdd7abca84fa19dd21118cd285d3e2ce1a9444e8161ce9fa62fdcd60405160405180910390a250565b61414f612d97565b6141c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b47821115614237576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f43616e6e6f7420667265657a65206d6f7265207468616e2062616c616e63650081525060200191505060405180910390fd5b8160118190555062015180428161424a57fe5b04601281905550806013819055505050565b600d6020528060005260406000206000915090505481565b61427c612d97565b6142ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6142f781614d02565b50565b600e5481565b61430861516c565b6040518060200160405280838152509050919050565b61432661516c565b604051806020016040528069d3c21bcecceda1000000815250905090565b6000816000015183600001511115905092915050565b6000614364613e09565b8211156143d9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f457863656564696e6720756e66726f7a656e207265736572766573000000000081525060200191505060405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f1935050505015801561441f573d6000803e3d6000fd5b508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f4dd1abe16ad3d4f829372dc77766ca2cce34e205af9b10f8cc1fab370425864f846040518082815260200191505060405180910390a36001905092915050565b60006144d183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250614f04565b905092915050565b6144e161516c565b6144e961516c565b6144f96144f4612204565b614300565b9050614518614509600854614300565b82614fc490919063ffffffff16565b1561452f576145276000614300565b91505061453e565b61453a600754614300565b9150505b90565b600081600001519050919050565b61455761516c565b61455f614fda565b8211156145b7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603681526020018061525e6036913960400191505060405180910390fd5b604051806020016040528069d3c21bcecceda100000084028152509050919050565b6145e161516c565b6000836000015114806145f8575060008260000151145b1561461457604051806020016040528060008152509050614a32565b69d3c21bcecceda10000008260000151141561463257829050614a32565b69d3c21bcecceda10000008360000151141561465057819050614a32565b600069d3c21bcecceda100000061466685614ff9565b600001518161467157fe5b049050600061467f85615030565b600001519050600069d3c21bcecceda100000061469b86614ff9565b60000151816146a657fe5b04905060006146b486615030565b600001519050600082850290506000851461474857828582816146d357fe5b0414614747576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f766572666c6f7720783179312064657465637465640000000000000000000081525060200191505060405180910390fd5b5b600069d3c21bcecceda100000082029050600082146147ea5769d3c21bcecceda100000082828161477557fe5b04146147e9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f6f766572666c6f772078317931202a206669786564312064657465637465640081525060200191505060405180910390fd5b5b809150600084860290506000861461487b578486828161480657fe5b041461487a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f766572666c6f7720783279312064657465637465640000000000000000000081525060200191505060405180910390fd5b5b6000848802905060008814614909578488828161489457fe5b0414614908576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f766572666c6f7720783179322064657465637465640000000000000000000081525060200191505060405180910390fd5b5b61491161506d565b878161491957fe5b04965061492461506d565b858161492c57fe5b04945060008588029050600088146149bd578588828161494857fe5b04146149bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f766572666c6f7720783279322064657465637465640000000000000000000081525060200191505060405180910390fd5b5b6149c561516c565b60405180602001604052808781525090506149ee81604051806020016040528087815250614e46565b9050614a0881604051806020016040528086815250614e46565b9050614a2281604051806020016040528085815250614e46565b9050809a50505050505050505050505b92915050565b600069d3c21bcecceda1000000826000015181614a5157fe5b049050919050565b600080831415614a6c5760009050614ad9565b6000828402905082848281614a7d57fe5b0414614ad4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806152b56021913960400191505060405180910390fd5b809150505b92915050565b6000614b2183836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061507a565b905092915050565b600080828401905083811015614ba7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b614bb961516c565b600082600001511415614c34576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f63616e277420646976696465206279203000000000000000000000000000000081525060200191505060405180910390fd5b600069d3c21bcecceda10000008460000151029050836000015169d3c21bcecceda10000008281614c6157fe5b0414614cd5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f6f766572666c6f7720617420646976696465000000000000000000000000000081525060200191505060405180910390fd5b604051806020016040528084600001518381614ced57fe5b0481525091505092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415614d88576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806152176026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b614e4e61516c565b6000826000015184600001510190508360000151811015614ed7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f616464206f766572666c6f77206465746563746564000000000000000000000081525060200191505060405180910390fd5b60405180602001604052808281525091505092915050565b60008160000151836000015114905092915050565b6000838311158290614fb1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015614f76578082015181840152602081019050614f5b565b50505050905090810190601f168015614fa35780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b6000816000015183600001511015905092915050565b60007601357c299a88ea76a58924d52ce4f26a85af186c2b9e74905090565b61500161516c565b604051806020016040528069d3c21bcecceda10000008085600001518161502457fe5b04028152509050919050565b61503861516c565b604051806020016040528069d3c21bcecceda10000008085600001518161505b57fe5b04028460000151038152509050919050565b600064e8d4a51000905090565b60008083118290615126576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156150eb5780820151818401526020810190506150d0565b50505050905090810190601f1680156151185780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50600083858161513257fe5b049050809150509392505050565b8154818355818111156151675781836000526020600020918201910161516691906151cc565b5b505050565b6040518060200160405280600081525090565b8280548282559060005260206000209081019282156151bb579160200282015b828111156151ba57825182559160200191906001019061519f565b5b5090506151c891906151f1565b5090565b6151ee91905b808211156151ea5760008160009055506001016151d2565b5090565b90565b61521391905b8082111561520f5760008160009055506001016151f7565b5090565b9056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373746f62696e207461782063616e6e6f74206265206c6172676572207468616e203163616e277420637265617465206669786964697479206e756d626572206c6172676572207468616e206d61784e65774669786564282953756d206f6620617373657420616c6c6f636174696f6e206d7573742062652031536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77696e64657820696e746f2072657365727665206c697374206e6f74206d617070656420746f20616464726573737370656e64696e6720726174696f2063616e6e6f74206265206c6172676572207468616e2031696e64657820696e746f20746f6b656e73206c697374206e6f74206d617070656420746f20746f6b656e63616e206f6e6c79207472616e7366657220746f206f746865722072657365727665206164647265737373656e646572206e6f7420616c6c6f77656420746f207472616e7366657220526573657276652066756e6473a265627a7a723158201abc091a46ca04db0956f125f1cf267840cd7027da2a0fee840c43861698c00464736f6c634300050d0032";

    public static final String FUNC_ASSETALLOCATIONSYMBOLS = "assetAllocationSymbols";

    public static final String FUNC_ASSETALLOCATIONWEIGHTS = "assetAllocationWeights";

    public static final String FUNC_FROZENRESERVEGOLDDAYS = "frozenReserveGoldDays";

    public static final String FUNC_FROZENRESERVEGOLDSTARTBALANCE = "frozenReserveGoldStartBalance";

    public static final String FUNC_FROZENRESERVEGOLDSTARTDAY = "frozenReserveGoldStartDay";

    public static final String FUNC_INITIALIZED = "initialized";

    public static final String FUNC_ISOTHERRESERVEADDRESS = "isOtherReserveAddress";

    public static final String FUNC_ISOWNER = "isOwner";

    public static final String FUNC_ISSPENDER = "isSpender";

    public static final String FUNC_ISTOKEN = "isToken";

    public static final String FUNC_LASTSPENDINGDAY = "lastSpendingDay";

    public static final String FUNC_OTHERRESERVEADDRESSES = "otherReserveAddresses";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_REGISTRY = "registry";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_SETREGISTRY = "setRegistry";

    public static final String FUNC_SPENDINGLIMIT = "spendingLimit";

    public static final String FUNC_TOBINTAX = "tobinTax";

    public static final String FUNC_TOBINTAXCACHE = "tobinTaxCache";

    public static final String FUNC_TOBINTAXRESERVERATIO = "tobinTaxReserveRatio";

    public static final String FUNC_TOBINTAXSTALENESSTHRESHOLD = "tobinTaxStalenessThreshold";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_GETVERSIONNUMBER = "getVersionNumber";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_SETTOBINTAXSTALENESSTHRESHOLD = "setTobinTaxStalenessThreshold";

    public static final String FUNC_SETTOBINTAX = "setTobinTax";

    public static final String FUNC_SETTOBINTAXRESERVERATIO = "setTobinTaxReserveRatio";

    public static final String FUNC_SETDAILYSPENDINGRATIO = "setDailySpendingRatio";

    public static final String FUNC_GETDAILYSPENDINGRATIO = "getDailySpendingRatio";

    public static final String FUNC_SETFROZENGOLD = "setFrozenGold";

    public static final String FUNC_SETASSETALLOCATIONS = "setAssetAllocations";

    public static final String FUNC_ADDTOKEN = "addToken";

    public static final String FUNC_REMOVETOKEN = "removeToken";

    public static final String FUNC_ADDOTHERRESERVEADDRESS = "addOtherReserveAddress";

    public static final String FUNC_REMOVEOTHERRESERVEADDRESS = "removeOtherReserveAddress";

    public static final String FUNC_ADDSPENDER = "addSpender";

    public static final String FUNC_REMOVESPENDER = "removeSpender";

    public static final String FUNC_TRANSFERGOLD = "transferGold";

    public static final String FUNC_TRANSFEREXCHANGEGOLD = "transferExchangeGold";

    public static final String FUNC_GETORCOMPUTETOBINTAX = "getOrComputeTobinTax";

    public static final String FUNC_GETTOKENS = "getTokens";

    public static final String FUNC_GETOTHERRESERVEADDRESSES = "getOtherReserveAddresses";

    public static final String FUNC_GETASSETALLOCATIONSYMBOLS = "getAssetAllocationSymbols";

    public static final String FUNC_GETASSETALLOCATIONWEIGHTS = "getAssetAllocationWeights";

    public static final String FUNC_GETUNFROZENBALANCE = "getUnfrozenBalance";

    public static final String FUNC_GETRESERVEGOLDBALANCE = "getReserveGoldBalance";

    public static final String FUNC_GETOTHERRESERVEADDRESSESGOLDBALANCE = "getOtherReserveAddressesGoldBalance";

    public static final String FUNC_GETUNFROZENRESERVEGOLDBALANCE = "getUnfrozenReserveGoldBalance";

    public static final String FUNC_GETFROZENRESERVEGOLDBALANCE = "getFrozenReserveGoldBalance";

    public static final String FUNC_GETRESERVERATIO = "getReserveRatio";

    public static final Event ASSETALLOCATIONSET_EVENT = new Event("AssetAllocationSet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
    ;

    public static final Event DAILYSPENDINGRATIOSET_EVENT = new Event("DailySpendingRatioSet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event OTHERRESERVEADDRESSADDED_EVENT = new Event("OtherReserveAddressAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event OTHERRESERVEADDRESSREMOVED_EVENT = new Event("OtherReserveAddressRemoved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event REGISTRYSET_EVENT = new Event("RegistrySet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event RESERVEGOLDTRANSFERRED_EVENT = new Event("ReserveGoldTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SPENDERADDED_EVENT = new Event("SpenderAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event SPENDERREMOVED_EVENT = new Event("SpenderRemoved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event TOBINTAXRESERVERATIOSET_EVENT = new Event("TobinTaxReserveRatioSet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event TOBINTAXSET_EVENT = new Event("TobinTaxSet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event TOBINTAXSTALENESSTHRESHOLDSET_EVENT = new Event("TobinTaxStalenessThresholdSet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event TOKENADDED_EVENT = new Event("TokenAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event TOKENREMOVED_EVENT = new Event("TokenRemoved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected Reserve(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Reserve(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Reserve(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Reserve(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<AssetAllocationSetEventResponse> getAssetAllocationSetEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ASSETALLOCATIONSET_EVENT, transactionReceipt);
        ArrayList<AssetAllocationSetEventResponse> responses = new ArrayList<AssetAllocationSetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AssetAllocationSetEventResponse typedResponse = new AssetAllocationSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.symbols = (List<byte[]>) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.weights = (List<BigInteger>) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AssetAllocationSetEventResponse> assetAllocationSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AssetAllocationSetEventResponse>() {
            @Override
            public AssetAllocationSetEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ASSETALLOCATIONSET_EVENT, log);
                AssetAllocationSetEventResponse typedResponse = new AssetAllocationSetEventResponse();
                typedResponse.log = log;
                typedResponse.symbols = (List<byte[]>) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.weights = (List<BigInteger>) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AssetAllocationSetEventResponse> assetAllocationSetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ASSETALLOCATIONSET_EVENT));
        return assetAllocationSetEventFlowable(filter);
    }

    public List<DailySpendingRatioSetEventResponse> getDailySpendingRatioSetEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DAILYSPENDINGRATIOSET_EVENT, transactionReceipt);
        ArrayList<DailySpendingRatioSetEventResponse> responses = new ArrayList<DailySpendingRatioSetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DailySpendingRatioSetEventResponse typedResponse = new DailySpendingRatioSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.ratio = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DailySpendingRatioSetEventResponse> dailySpendingRatioSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DailySpendingRatioSetEventResponse>() {
            @Override
            public DailySpendingRatioSetEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DAILYSPENDINGRATIOSET_EVENT, log);
                DailySpendingRatioSetEventResponse typedResponse = new DailySpendingRatioSetEventResponse();
                typedResponse.log = log;
                typedResponse.ratio = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DailySpendingRatioSetEventResponse> dailySpendingRatioSetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DAILYSPENDINGRATIOSET_EVENT));
        return dailySpendingRatioSetEventFlowable(filter);
    }

    public List<OtherReserveAddressAddedEventResponse> getOtherReserveAddressAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OTHERRESERVEADDRESSADDED_EVENT, transactionReceipt);
        ArrayList<OtherReserveAddressAddedEventResponse> responses = new ArrayList<OtherReserveAddressAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OtherReserveAddressAddedEventResponse typedResponse = new OtherReserveAddressAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.otherReserveAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OtherReserveAddressAddedEventResponse> otherReserveAddressAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OtherReserveAddressAddedEventResponse>() {
            @Override
            public OtherReserveAddressAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OTHERRESERVEADDRESSADDED_EVENT, log);
                OtherReserveAddressAddedEventResponse typedResponse = new OtherReserveAddressAddedEventResponse();
                typedResponse.log = log;
                typedResponse.otherReserveAddress = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OtherReserveAddressAddedEventResponse> otherReserveAddressAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OTHERRESERVEADDRESSADDED_EVENT));
        return otherReserveAddressAddedEventFlowable(filter);
    }

    public List<OtherReserveAddressRemovedEventResponse> getOtherReserveAddressRemovedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OTHERRESERVEADDRESSREMOVED_EVENT, transactionReceipt);
        ArrayList<OtherReserveAddressRemovedEventResponse> responses = new ArrayList<OtherReserveAddressRemovedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OtherReserveAddressRemovedEventResponse typedResponse = new OtherReserveAddressRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.otherReserveAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.index = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OtherReserveAddressRemovedEventResponse> otherReserveAddressRemovedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OtherReserveAddressRemovedEventResponse>() {
            @Override
            public OtherReserveAddressRemovedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OTHERRESERVEADDRESSREMOVED_EVENT, log);
                OtherReserveAddressRemovedEventResponse typedResponse = new OtherReserveAddressRemovedEventResponse();
                typedResponse.log = log;
                typedResponse.otherReserveAddress = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.index = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OtherReserveAddressRemovedEventResponse> otherReserveAddressRemovedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OTHERRESERVEADDRESSREMOVED_EVENT));
        return otherReserveAddressRemovedEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<RegistrySetEventResponse> getRegistrySetEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REGISTRYSET_EVENT, transactionReceipt);
        ArrayList<RegistrySetEventResponse> responses = new ArrayList<RegistrySetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RegistrySetEventResponse typedResponse = new RegistrySetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.registryAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RegistrySetEventResponse> registrySetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RegistrySetEventResponse>() {
            @Override
            public RegistrySetEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(REGISTRYSET_EVENT, log);
                RegistrySetEventResponse typedResponse = new RegistrySetEventResponse();
                typedResponse.log = log;
                typedResponse.registryAddress = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RegistrySetEventResponse> registrySetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REGISTRYSET_EVENT));
        return registrySetEventFlowable(filter);
    }

    public List<ReserveGoldTransferredEventResponse> getReserveGoldTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RESERVEGOLDTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<ReserveGoldTransferredEventResponse> responses = new ArrayList<ReserveGoldTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ReserveGoldTransferredEventResponse typedResponse = new ReserveGoldTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.spender = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ReserveGoldTransferredEventResponse> reserveGoldTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ReserveGoldTransferredEventResponse>() {
            @Override
            public ReserveGoldTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RESERVEGOLDTRANSFERRED_EVENT, log);
                ReserveGoldTransferredEventResponse typedResponse = new ReserveGoldTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.spender = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ReserveGoldTransferredEventResponse> reserveGoldTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RESERVEGOLDTRANSFERRED_EVENT));
        return reserveGoldTransferredEventFlowable(filter);
    }

    public List<SpenderAddedEventResponse> getSpenderAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SPENDERADDED_EVENT, transactionReceipt);
        ArrayList<SpenderAddedEventResponse> responses = new ArrayList<SpenderAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SpenderAddedEventResponse typedResponse = new SpenderAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.spender = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SpenderAddedEventResponse> spenderAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SpenderAddedEventResponse>() {
            @Override
            public SpenderAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SPENDERADDED_EVENT, log);
                SpenderAddedEventResponse typedResponse = new SpenderAddedEventResponse();
                typedResponse.log = log;
                typedResponse.spender = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SpenderAddedEventResponse> spenderAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SPENDERADDED_EVENT));
        return spenderAddedEventFlowable(filter);
    }

    public List<SpenderRemovedEventResponse> getSpenderRemovedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SPENDERREMOVED_EVENT, transactionReceipt);
        ArrayList<SpenderRemovedEventResponse> responses = new ArrayList<SpenderRemovedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SpenderRemovedEventResponse typedResponse = new SpenderRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.spender = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SpenderRemovedEventResponse> spenderRemovedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SpenderRemovedEventResponse>() {
            @Override
            public SpenderRemovedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SPENDERREMOVED_EVENT, log);
                SpenderRemovedEventResponse typedResponse = new SpenderRemovedEventResponse();
                typedResponse.log = log;
                typedResponse.spender = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SpenderRemovedEventResponse> spenderRemovedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SPENDERREMOVED_EVENT));
        return spenderRemovedEventFlowable(filter);
    }

    public List<TobinTaxReserveRatioSetEventResponse> getTobinTaxReserveRatioSetEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TOBINTAXRESERVERATIOSET_EVENT, transactionReceipt);
        ArrayList<TobinTaxReserveRatioSetEventResponse> responses = new ArrayList<TobinTaxReserveRatioSetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TobinTaxReserveRatioSetEventResponse typedResponse = new TobinTaxReserveRatioSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TobinTaxReserveRatioSetEventResponse> tobinTaxReserveRatioSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TobinTaxReserveRatioSetEventResponse>() {
            @Override
            public TobinTaxReserveRatioSetEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TOBINTAXRESERVERATIOSET_EVENT, log);
                TobinTaxReserveRatioSetEventResponse typedResponse = new TobinTaxReserveRatioSetEventResponse();
                typedResponse.log = log;
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TobinTaxReserveRatioSetEventResponse> tobinTaxReserveRatioSetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TOBINTAXRESERVERATIOSET_EVENT));
        return tobinTaxReserveRatioSetEventFlowable(filter);
    }

    public List<TobinTaxSetEventResponse> getTobinTaxSetEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TOBINTAXSET_EVENT, transactionReceipt);
        ArrayList<TobinTaxSetEventResponse> responses = new ArrayList<TobinTaxSetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TobinTaxSetEventResponse typedResponse = new TobinTaxSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TobinTaxSetEventResponse> tobinTaxSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TobinTaxSetEventResponse>() {
            @Override
            public TobinTaxSetEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TOBINTAXSET_EVENT, log);
                TobinTaxSetEventResponse typedResponse = new TobinTaxSetEventResponse();
                typedResponse.log = log;
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TobinTaxSetEventResponse> tobinTaxSetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TOBINTAXSET_EVENT));
        return tobinTaxSetEventFlowable(filter);
    }

    public List<TobinTaxStalenessThresholdSetEventResponse> getTobinTaxStalenessThresholdSetEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TOBINTAXSTALENESSTHRESHOLDSET_EVENT, transactionReceipt);
        ArrayList<TobinTaxStalenessThresholdSetEventResponse> responses = new ArrayList<TobinTaxStalenessThresholdSetEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TobinTaxStalenessThresholdSetEventResponse typedResponse = new TobinTaxStalenessThresholdSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TobinTaxStalenessThresholdSetEventResponse> tobinTaxStalenessThresholdSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TobinTaxStalenessThresholdSetEventResponse>() {
            @Override
            public TobinTaxStalenessThresholdSetEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TOBINTAXSTALENESSTHRESHOLDSET_EVENT, log);
                TobinTaxStalenessThresholdSetEventResponse typedResponse = new TobinTaxStalenessThresholdSetEventResponse();
                typedResponse.log = log;
                typedResponse.value = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TobinTaxStalenessThresholdSetEventResponse> tobinTaxStalenessThresholdSetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TOBINTAXSTALENESSTHRESHOLDSET_EVENT));
        return tobinTaxStalenessThresholdSetEventFlowable(filter);
    }

    public List<TokenAddedEventResponse> getTokenAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TOKENADDED_EVENT, transactionReceipt);
        ArrayList<TokenAddedEventResponse> responses = new ArrayList<TokenAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TokenAddedEventResponse typedResponse = new TokenAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.token = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TokenAddedEventResponse> tokenAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TokenAddedEventResponse>() {
            @Override
            public TokenAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TOKENADDED_EVENT, log);
                TokenAddedEventResponse typedResponse = new TokenAddedEventResponse();
                typedResponse.log = log;
                typedResponse.token = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TokenAddedEventResponse> tokenAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TOKENADDED_EVENT));
        return tokenAddedEventFlowable(filter);
    }

    public List<TokenRemovedEventResponse> getTokenRemovedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TOKENREMOVED_EVENT, transactionReceipt);
        ArrayList<TokenRemovedEventResponse> responses = new ArrayList<TokenRemovedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TokenRemovedEventResponse typedResponse = new TokenRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.token = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.index = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TokenRemovedEventResponse> tokenRemovedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TokenRemovedEventResponse>() {
            @Override
            public TokenRemovedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TOKENREMOVED_EVENT, log);
                TokenRemovedEventResponse typedResponse = new TokenRemovedEventResponse();
                typedResponse.log = log;
                typedResponse.token = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.index = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TokenRemovedEventResponse> tokenRemovedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TOKENREMOVED_EVENT));
        return tokenRemovedEventFlowable(filter);
    }

    public RemoteFunctionCall<byte[]> assetAllocationSymbols(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ASSETALLOCATIONSYMBOLS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<BigInteger> assetAllocationWeights(byte[] param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ASSETALLOCATIONWEIGHTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> frozenReserveGoldDays() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_FROZENRESERVEGOLDDAYS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> frozenReserveGoldStartBalance() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_FROZENRESERVEGOLDSTARTBALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> frozenReserveGoldStartDay() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_FROZENRESERVEGOLDSTARTDAY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> initialized() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_INITIALIZED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isOtherReserveAddress(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISOTHERRESERVEADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isOwner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isSpender(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISSPENDER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isToken(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISTOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> lastSpendingDay() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LASTSPENDINGDAY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> otherReserveAddresses(BigInteger param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OTHERRESERVEADDRESSES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> registry() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_REGISTRY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setRegistry(String registryAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETREGISTRY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(registryAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> spendingLimit() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SPENDINGLIMIT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> tobinTax() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOBINTAX, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple2<BigInteger, BigInteger>> tobinTaxCache() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOBINTAXCACHE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint128>() {}, new TypeReference<Uint128>() {}));
        return new RemoteFunctionCall<Tuple2<BigInteger, BigInteger>>(function,
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> tobinTaxReserveRatio() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOBINTAXRESERVERATIO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> tobinTaxStalenessThreshold() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOBINTAXSTALENESSTHRESHOLD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>> getVersionNumber() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETVERSIONNUMBER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple4<BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(String registryAddress, BigInteger _tobinTaxStalenessThreshold, BigInteger _spendingRatio, BigInteger _frozenGold, BigInteger _frozenDays, List<byte[]> _assetAllocationSymbols, List<BigInteger> _assetAllocationWeights, BigInteger _tobinTax, BigInteger _tobinTaxReserveRatio) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(registryAddress), 
                new org.web3j.abi.datatypes.generated.Uint256(_tobinTaxStalenessThreshold), 
                new org.web3j.abi.datatypes.generated.Uint256(_spendingRatio), 
                new org.web3j.abi.datatypes.generated.Uint256(_frozenGold), 
                new org.web3j.abi.datatypes.generated.Uint256(_frozenDays), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(_assetAllocationSymbols, org.web3j.abi.datatypes.generated.Bytes32.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(_assetAllocationWeights, org.web3j.abi.datatypes.generated.Uint256.class)), 
                new org.web3j.abi.datatypes.generated.Uint256(_tobinTax), 
                new org.web3j.abi.datatypes.generated.Uint256(_tobinTaxReserveRatio)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setTobinTaxStalenessThreshold(BigInteger value) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETTOBINTAXSTALENESSTHRESHOLD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setTobinTax(BigInteger value) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETTOBINTAX, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setTobinTaxReserveRatio(BigInteger value) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETTOBINTAXRESERVERATIO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setDailySpendingRatio(BigInteger ratio) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETDAILYSPENDINGRATIO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(ratio)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getDailySpendingRatio() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETDAILYSPENDINGRATIO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> setFrozenGold(BigInteger frozenGold, BigInteger frozenDays) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETFROZENGOLD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(frozenGold), 
                new org.web3j.abi.datatypes.generated.Uint256(frozenDays)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setAssetAllocations(List<byte[]> symbols, List<BigInteger> weights) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETASSETALLOCATIONS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.datatypes.generated.Bytes32.class,
                        org.web3j.abi.Utils.typeMap(symbols, org.web3j.abi.datatypes.generated.Bytes32.class)), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Uint256>(
                        org.web3j.abi.datatypes.generated.Uint256.class,
                        org.web3j.abi.Utils.typeMap(weights, org.web3j.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addToken(String token) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDTOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(token)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> removeToken(String token, BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REMOVETOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(token), 
                new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addOtherReserveAddress(String reserveAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDOTHERRESERVEADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(reserveAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> removeOtherReserveAddress(String reserveAddress, BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REMOVEOTHERRESERVEADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(reserveAddress), 
                new org.web3j.abi.datatypes.generated.Uint256(index)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addSpender(String spender) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDSPENDER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(spender)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> removeSpender(String spender) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REMOVESPENDER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(spender)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferGold(String to, BigInteger value) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFERGOLD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferExchangeGold(String to, BigInteger value) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEREXCHANGEGOLD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> getOrComputeTobinTax() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GETORCOMPUTETOBINTAX, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> getTokens() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETTOKENS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getOtherReserveAddresses() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETOTHERRESERVEADDRESSES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getAssetAllocationSymbols() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETASSETALLOCATIONSYMBOLS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getAssetAllocationWeights() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETASSETALLOCATIONWEIGHTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getUnfrozenBalance() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETUNFROZENBALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getReserveGoldBalance() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETRESERVEGOLDBALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getOtherReserveAddressesGoldBalance() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETOTHERRESERVEADDRESSESGOLDBALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getUnfrozenReserveGoldBalance() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETUNFROZENRESERVEGOLDBALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getFrozenReserveGoldBalance() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETFROZENRESERVEGOLDBALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getReserveRatio() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETRESERVERATIO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    @Deprecated
    public static Reserve load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Reserve(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Reserve load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Reserve(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Reserve load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Reserve(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Reserve load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Reserve(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Reserve> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Reserve.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Reserve> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Reserve.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Reserve> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Reserve.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Reserve> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Reserve.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class AssetAllocationSetEventResponse extends BaseEventResponse {
        public List<byte[]> symbols;

        public List<BigInteger> weights;
    }

    public static class DailySpendingRatioSetEventResponse extends BaseEventResponse {
        public BigInteger ratio;
    }

    public static class OtherReserveAddressAddedEventResponse extends BaseEventResponse {
        public String otherReserveAddress;
    }

    public static class OtherReserveAddressRemovedEventResponse extends BaseEventResponse {
        public String otherReserveAddress;

        public BigInteger index;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class RegistrySetEventResponse extends BaseEventResponse {
        public String registryAddress;
    }

    public static class ReserveGoldTransferredEventResponse extends BaseEventResponse {
        public String spender;

        public String to;

        public BigInteger value;
    }

    public static class SpenderAddedEventResponse extends BaseEventResponse {
        public String spender;
    }

    public static class SpenderRemovedEventResponse extends BaseEventResponse {
        public String spender;
    }

    public static class TobinTaxReserveRatioSetEventResponse extends BaseEventResponse {
        public BigInteger value;
    }

    public static class TobinTaxSetEventResponse extends BaseEventResponse {
        public BigInteger value;
    }

    public static class TobinTaxStalenessThresholdSetEventResponse extends BaseEventResponse {
        public BigInteger value;
    }

    public static class TokenAddedEventResponse extends BaseEventResponse {
        public String token;
    }

    public static class TokenRemovedEventResponse extends BaseEventResponse {
        public String token;

        public BigInteger index;
    }
}
