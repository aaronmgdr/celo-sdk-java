package org.celo.contractkit.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.*;
import java.util.concurrent.Callable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.6.1.
 */
@SuppressWarnings({"rawtypes", "unchecked"})
public class Exchange extends Contract {
    public static final String BINARY = "0x6080604052600060085560006100196100c560201b60201c565b905080600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35060016002819055506100cd565b600033905090565b6139af80620000dd6000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c80637b103999116100f9578063b66a261c11610097578063db1bc87b11610071578063db1bc87b14610735578063dda57b9314610779578063e0c8b50a14610797578063f2fde38b146107b5576101c4565b8063b66a261c14610681578063c3434883146106af578063d404f7f814610707576101c4565b80638da5cb5b116100d35780638da5cb5b146105835780638f32d59b146105cd5780639ed02b58146105ef578063a91ee0dc1461063d576101c4565b80637b1039991461045557806386489ba91461049f5780638ab1a5d41461052b576101c4565b806354255be011610166578063673ea08611610140578063673ea086146103b45780636a5eaf47146103d2578063715018a61461040057806378ba9cfd1461040a576101c4565b806354255be0146103455780635c25c76c1461037857806362f0908414610396576101c4565b806325ac2de6116101a257806325ac2de6146102535780632bc7d67a146102715780634a1be6cb146102c95780634c0226a2146102f7576101c4565b8063158ef93e146101c957806322503ce5146101eb57806322be3de114610209575b600080fd5b6101d16107f9565b604051808215151515815260200191505060405180910390f35b6101f361080b565b6040518082815260200191505060405180910390f35b610211610811565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61025b610837565b6040518082815260200191505060405180910390f35b6102b36004803603606081101561028757600080fd5b81019080803590602001909291908035906020019092919080351515906020019092919050505061083d565b6040518082815260200191505060405180910390f35b6102f5600480360360208110156102df57600080fd5b8101908080359060200190929190505050610853565b005b61032f6004803603604081101561030d57600080fd5b810190808035906020019092919080351515906020019092919050505061090e565b6040518082815260200191505060405180910390f35b61034d610935565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390f35b61038061095c565b6040518082815260200191505060405180910390f35b61039e610968565b6040518082815260200191505060405180910390f35b6103bc61096e565b6040518082815260200191505060405180910390f35b6103fe600480360360208110156103e857600080fd5b8101908080359060200190929190505050610974565b005b610408610ac5565b005b6104386004803603602081101561042057600080fd5b81019080803515159060200190929190505050610bff565b604051808381526020018281526020019250505060405180910390f35b61045d610c4f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610529600480360360c08110156104b557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019092919080359060200190929190505050610c75565b005b61056d6004803603606081101561054157600080fd5b810190808035906020019092919080359060200190929190803515159060200190929190505050610d60565b6040518082815260200191505060405180910390f35b61058b610f9f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6105d5610fc8565b604051808215151515815260200191505060405180910390f35b6106276004803603604081101561060557600080fd5b8101908080359060200190929190803515159060200190929190505050611026565b6040518082815260200191505060405180910390f35b61067f6004803603602081101561065357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061104d565b005b6106ad6004803603602081101561069757600080fd5b81019080803590602001909291905050506111f1565b005b6106f1600480360360608110156106c557600080fd5b8101908080359060200190929190803590602001909291908035151590602001909291905050506112bd565b6040518082815260200191505060405180910390f35b6107336004803603602081101561071d57600080fd5b8101908080359060200190929190505050611503565b005b6107776004803603602081101561074b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115be565b005b6107816116bf565b6040518082815260200191505060405180910390f35b61079f6116cb565b6040518082815260200191505060405180910390f35b6107f7600480360360208110156107cb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506116d1565b005b6000809054906101000a900460ff1681565b600a5481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60075481565b600061084a848484610d60565b90509392505050565b61085b610fc8565b6108cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b806009819055507f90c0a4a142fbfbc2ae8c21f50729a2f4bc56e85a66c1a1b6654f1e85092a54a6816040518082815260200191505060405180910390a150565b600080600061091c84610bff565b9150915061092b828287611757565b9250505092915050565b60008060008060018060016000839350829250819150809050935093509350935090919293565b60038060000154905081565b60065481565b60095481565b61097c610fc8565b6109ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6109f781611824565b600460008201518160000155905050610a36610a11611842565b600460405180602001604052908160008201548152505061186890919063ffffffff16565b610a8b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806139546027913960400191505060405180910390fd5b7fb690f84efb1d9039c2834effb7bebc792a85bfec7ef84f4b269528454f363ccf816040518082815260200191505060405180910390a150565b610acd610fc8565b610b3f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000806000600654905060006007549050610c1861187d565b15610c2e57610c25611c7a565b80925081935050505b8415610c41578082935093505050610c4a565b81819350935050505b915091565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900460ff1615610cf7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f636f6e747261637420616c726561647920696e697469616c697a65640000000081525060200191505060405180910390fd5b60016000806101000a81548160ff021916908315150217905550610d1a33611cd3565b610d238661104d565b610d2c856115be565b610d35846111f1565b610d3e83610974565b610d4782610853565b610d5081611503565b610d58611e19565b505050505050565b6000610d6a611e8f565b73ffffffffffffffffffffffffffffffffffffffff1663e5839836306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610de657600080fd5b505afa158015610dfa573d6000803e3d6000fd5b505050506040513d6020811015610e1057600080fd5b810190808051906020019092919050505015610e77576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602281526020018061386d6022913960400191505060405180910390fd5b610e7f611e19565b600160026000828254019250508190555060006002549050600080610ea385611f8a565b915091506000610eb483838a611fb2565b905086811015610f0f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260398152602001806138346039913960400191505060405180910390fd5b610f1a888288612052565b8094505050506002548114610f97576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f7265656e7472616e742063616c6c00000000000000000000000000000000000081525060200191505060405180910390fd5b509392505050565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661100a61285e565b73ffffffffffffffffffffffffffffffffffffffff1614905090565b600080600061103484610bff565b91509150611043828287611fb2565b9250505092915050565b611055610fc8565b6110c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561116a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f43616e6e6f7420726567697374657220746865206e756c6c206164647265737381525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f27fe5f0c1c3b1ed427cc63d0f05759ffdecf9aec9e18d31ef366fc8a6cb5dc3b60405160405180910390a250565b6111f9610fc8565b61126b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b61127481611824565b6003600082015181600001559050507f8946f328efcc515b5cc3282f6cd95e87a6c0d3508421af0b52d4d3620b3e2db3816040518082815260200191505060405180910390a150565b60006112c7611e8f565b73ffffffffffffffffffffffffffffffffffffffff1663e5839836306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561134357600080fd5b505afa158015611357573d6000803e3d6000fd5b505050506040513d602081101561136d57600080fd5b8101908080519060200190929190505050156113d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602281526020018061386d6022913960400191505060405180910390fd5b6113dc611e19565b60016002600082825401925050819055506000600254905060008315905060008061140683611f8a565b91509150600061141783838b611757565b905087811115611472576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603e8152602001806138c5603e913960400191505060405180910390fd5b61147d818a86612052565b8095505050505060025481146114fb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f7265656e7472616e742063616c6c00000000000000000000000000000000000081525060200191505060405180910390fd5b509392505050565b61150b610fc8565b61157d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600a819055507f08523596abc266fb46d9c40ddf78fdfd3c08142252833ddce1a2b46f76521035816040518082815260200191505060405180910390a150565b6115c6610fc8565b611638576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f119a23392e161a0bc5f9d5f3e2a6040c45b40d43a36973e10ea1de916f3d8a8a60405160405180910390a250565b60048060000154905081565b60085481565b6116d9610fc8565b61174b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b61175481611cd3565b50565b60008082141561176a576000905061181d565b6117726137fa565b61178d611788858561286690919063ffffffff16565b6128ec565b90506117976137fa565b6117f36117ca60036040518060200160405290816000820154815250506117bc611842565b61297690919063ffffffff16565b6117e56117e0878a612a1d90919063ffffffff16565b6128ec565b612a6790919063ffffffff16565b905061181861180182612ec6565b61180a84612ec6565b612ed490919063ffffffff16565b925050505b9392505050565b61182c6137fa565b6040518060200160405280838152509050919050565b61184a6137fa565b604051806020016040528069d3c21bcecceda1000000815250905090565b60008160000151836000015110905092915050565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dcf0aaed60405160200180807f536f727465644f7261636c657300000000000000000000000000000000000000815250600d019050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561193957600080fd5b505afa15801561194d573d6000803e3d6000fd5b505050506040513d602081101561196357600080fd5b8101908080519060200190929190505050905060008173ffffffffffffffffffffffffffffffffffffffff1663ffe736bf600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050604080518083038186803b158015611a1657600080fd5b505afa158015611a2a573d6000803e3d6000fd5b505050506040513d6040811015611a4057600080fd5b8101908080519060200190929190805190602001909291905050505090506000611a77600954600854612f1e90919063ffffffff16565b42101590506000600a548473ffffffffffffffffffffffffffffffffffffffff1663bbc66a94600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611b2057600080fd5b505afa158015611b34573d6000803e3d6000fd5b505050506040513d6020811015611b4a57600080fd5b8101908080519060200190929190505050101590506000611b7660095442612a1d90919063ffffffff16565b8573ffffffffffffffffffffffffffffffffffffffff1663071b48fc600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611c1557600080fd5b505afa158015611c29573d6000803e3d6000fd5b505050506040513d6020811015611c3f57600080fd5b8101908080519060200190929190505050119050828015611c5d5750815b8015611c665750805b8015611c70575083155b9550505050505090565b6000806000611c87612fa6565b9050600080611c94613072565b80925081935050506000611cc382611cb5868661286690919063ffffffff16565b612ed490919063ffffffff16565b9050838195509550505050509091565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611d59576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061380e6026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611e2161187d565b15611e8d5742600881905550611e35611c7a565b60066000600760008491905055839190505550507fa18ec663cb684011386aa866c4dacb32d2d2ad859a35d3440b6ce7200a76bad8600654600754604051808381526020018281526020019250505060405180910390a15b565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dcf0aaed60405160200180807f467265657a6572000000000000000000000000000000000000000000000000008152506007019050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611f4a57600080fd5b505afa158015611f5e573d6000803e3d6000fd5b505050506040513d6020811015611f7457600080fd5b8101908080519060200190929190505050905090565b6000808215611fa25760075460065491509150611fad565b600654600754915091505b915091565b600080821415611fc5576000905061204b565b611fcd6137fa565b611fd6836132bb565b9050611fe06137fa565b611ffb611fec876128ec565b83612a6790919063ffffffff16565b90506120056137fa565b61202083612012886128ec565b61331490919063ffffffff16565b905061204561202e82612ec6565b61203784612ec6565b612ed490919063ffffffff16565b93505050505b9392505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dcf0aaed60405160200180807f52657365727665000000000000000000000000000000000000000000000000008152506007019050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561210d57600080fd5b505afa158015612121573d6000803e3d6000fd5b505050506040513d602081101561213757600080fd5b8101908080519060200190929190505050905081156124505761216584600654612f1e90919063ffffffff16565b60068190555061218083600754612a1d90919063ffffffff16565b60078190555061218e6133bd565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd3383876040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561224857600080fd5b505af115801561225c573d6000803e3d6000fd5b505050506040513d602081101561227257600080fd5b81019080805190602001909291905050506122f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f5472616e73666572206f662073656c6c20746f6b656e206661696c656400000081525060200191505060405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166340c10f1933856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561239e57600080fd5b505af11580156123b2573d6000803e3d6000fd5b505050506040513d60208110156123c857600080fd5b810190808051906020019092919050505061244b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f4d696e74206f6620737461626c6520746f6b656e206661696c6564000000000081525060200191505060405180910390fd5b6127f6565b61246584600754612f1e90919063ffffffff16565b60078190555061248083600654612a1d90919063ffffffff16565b600681905550600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561256357600080fd5b505af1158015612577573d6000803e3d6000fd5b505050506040513d602081101561258d57600080fd5b8101908080519060200190929190505050612610576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f5472616e73666572206f662073656c6c20746f6b656e206661696c656400000081525060200191505060405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342966c68856040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b15801561268557600080fd5b505af1158015612699573d6000803e3d6000fd5b505050506040513d60208110156126af57600080fd5b8101908080519060200190929190505050508073ffffffffffffffffffffffffffffffffffffffff166303a0fea333856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b15801561274857600080fd5b505af115801561275c573d6000803e3d6000fd5b505050506040513d602081101561277257600080fd5b81019080805190602001909291905050506127f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f5472616e73666572206f6620627579546f6b656e206661696c6564000000000081525060200191505060405180910390fd5b5b3373ffffffffffffffffffffffffffffffffffffffff167f402ac9185b4616422c2794bf5b118bfcc68ed496d52c0d9841dfa114fdeb05ba8585856040518084815260200183815260200182151515158152602001935050505060405180910390a250505050565b600033905090565b60008083141561287957600090506128e6565b600082840290508284828161288a57fe5b04146128e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806139336021913960400191505060405180910390fd5b809150505b92915050565b6128f46137fa565b6128fc6134b8565b821115612954576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603681526020018061388f6036913960400191505060405180910390fd5b604051806020016040528069d3c21bcecceda100000084028152509050919050565b61297e6137fa565b8160000151836000015110156129fc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f737562737472616374696f6e20756e646572666c6f772064657465637465640081525060200191505060405180910390fd5b60405180602001604052808360000151856000015103815250905092915050565b6000612a5f83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506134d7565b905092915050565b612a6f6137fa565b600083600001511480612a86575060008260000151145b15612aa257604051806020016040528060008152509050612ec0565b69d3c21bcecceda100000082600001511415612ac057829050612ec0565b69d3c21bcecceda100000083600001511415612ade57819050612ec0565b600069d3c21bcecceda1000000612af485613597565b6000015181612aff57fe5b0490506000612b0d856135ce565b600001519050600069d3c21bcecceda1000000612b2986613597565b6000015181612b3457fe5b0490506000612b42866135ce565b6000015190506000828502905060008514612bd65782858281612b6157fe5b0414612bd5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f766572666c6f7720783179312064657465637465640000000000000000000081525060200191505060405180910390fd5b5b600069d3c21bcecceda10000008202905060008214612c785769d3c21bcecceda1000000828281612c0357fe5b0414612c77576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f6f766572666c6f772078317931202a206669786564312064657465637465640081525060200191505060405180910390fd5b5b8091506000848602905060008614612d095784868281612c9457fe5b0414612d08576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f766572666c6f7720783279312064657465637465640000000000000000000081525060200191505060405180910390fd5b5b6000848802905060008814612d975784888281612d2257fe5b0414612d96576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f766572666c6f7720783179322064657465637465640000000000000000000081525060200191505060405180910390fd5b5b612d9f61360b565b8781612da757fe5b049650612db261360b565b8581612dba57fe5b0494506000858802905060008814612e4b5785888281612dd657fe5b0414612e4a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f766572666c6f7720783279322064657465637465640000000000000000000081525060200191505060405180910390fd5b5b612e536137fa565b6040518060200160405280878152509050612e7c81604051806020016040528087815250613314565b9050612e9681604051806020016040528086815250613314565b9050612eb081604051806020016040528085815250613314565b9050809a50505050505050505050505b92915050565b600081600001519050919050565b6000612f1683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250613618565b905092915050565b600080828401905083811015612f9c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600080612fb16136de565b73ffffffffffffffffffffffffffffffffffffffff16638b7df8d46040518163ffffffff1660e01b815260040160206040518083038186803b158015612ff657600080fd5b505afa15801561300a573d6000803e3d6000fd5b505050506040513d602081101561302057600080fd5b8101908080519060200190929190505050905061306c613067613042836128ec565b6004604051806020016040529081600082015481525050612a6790919063ffffffff16565b6137d9565b91505090565b600080600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dcf0aaed60405160200180807f536f727465644f7261636c657300000000000000000000000000000000000000815250600d019050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561313157600080fd5b505afa158015613145573d6000803e3d6000fd5b505050506040513d602081101561315b57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1663ef90e1b0600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050604080518083038186803b15801561320957600080fd5b505afa15801561321d573d6000803e3d6000fd5b505050506040513d604081101561323357600080fd5b8101908080519060200190929190805190602001909291905050508092508193505050600081116132af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260308152602001806139036030913960400191505060405180910390fd5b81819350935050509091565b6132c36137fa565b61330d6132cf836128ec565b6132ff60036040518060200160405290816000820154815250506132f1611842565b61297690919063ffffffff16565b612a6790919063ffffffff16565b9050919050565b61331c6137fa565b60008260000151846000015101905083600001518110156133a5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f616464206f766572666c6f77206465746563746564000000000000000000000081525060200191505060405180910390fd5b60405180602001604052808281525091505092915050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dcf0aaed60405160200180807f476f6c64546f6b656e00000000000000000000000000000000000000000000008152506009019050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561347857600080fd5b505afa15801561348c573d6000803e3d6000fd5b505050506040513d60208110156134a257600080fd5b8101908080519060200190929190505050905090565b60007601357c299a88ea76a58924d52ce4f26a85af186c2b9e74905090565b6000838311158290613584576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561354957808201518184015260208101905061352e565b50505050905090810190601f1680156135765780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b61359f6137fa565b604051806020016040528069d3c21bcecceda1000000808560000151816135c257fe5b04028152509050919050565b6135d66137fa565b604051806020016040528069d3c21bcecceda1000000808560000151816135f957fe5b04028460000151038152509050919050565b600064e8d4a51000905090565b600080831182906136c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561368957808201518184015260208101905061366e565b50505050905090810190601f1680156136b65780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385816136d057fe5b049050809150509392505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dcf0aaed60405160200180807f52657365727665000000000000000000000000000000000000000000000000008152506007019050604051602081830303815290604052805190602001206040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561379957600080fd5b505afa1580156137ad573d6000803e3d6000fd5b505050506040513d60208110156137c357600080fd5b8101908080519060200190929190505050905090565b600069d3c21bcecceda10000008260000151816137f257fe5b049050919050565b604051806020016040528060008152509056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737343616c63756c6174656420627579416d6f756e7420776173206c657373207468616e20737065636966696564206d696e427579416d6f756e7463616e27742063616c6c207768656e20636f6e74726163742069732066726f7a656e63616e277420637265617465206669786964697479206e756d626572206c6172676572207468616e206d61784e65774669786564282943616c63756c617465642073656c6c416d6f756e74207761732067726561746572207468616e20737065636966696564206d617853656c6c416d6f756e7465786368616e676520726174652064656e6f6d696e61746f72206d7573742062652067726561746572207468616e2030536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7772657365727665206672616374696f6e206d75737420626520736d616c6c6572207468616e2031a265627a7a72315820c4edf8217a4a551c2f8d4dce018938893706498ba58aee38cfa37c9730039b5364736f6c634300050d0032";

    public static final String FUNC_GOLDBUCKET = "goldBucket";

    public static final String FUNC_INITIALIZED = "initialized";

    public static final String FUNC_ISOWNER = "isOwner";

    public static final String FUNC_LASTBUCKETUPDATE = "lastBucketUpdate";

    public static final String FUNC_MINIMUMREPORTS = "minimumReports";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_REGISTRY = "registry";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_RESERVEFRACTION = "reserveFraction";

    public static final String FUNC_SETREGISTRY = "setRegistry";

    public static final String FUNC_SPREAD = "spread";

    public static final String FUNC_STABLE = "stable";

    public static final String FUNC_STABLEBUCKET = "stableBucket";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UPDATEFREQUENCY = "updateFrequency";

    public static final String FUNC_GETVERSIONNUMBER = "getVersionNumber";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_SELL = "sell";

    public static final String FUNC_EXCHANGE = "exchange";

    public static final String FUNC_BUY = "buy";

    public static final String FUNC_GETBUYTOKENAMOUNT = "getBuyTokenAmount";

    public static final String FUNC_GETSELLTOKENAMOUNT = "getSellTokenAmount";

    public static final String FUNC_GETBUYANDSELLBUCKETS = "getBuyAndSellBuckets";

    public static final String FUNC_SETUPDATEFREQUENCY = "setUpdateFrequency";

    public static final String FUNC_SETMINIMUMREPORTS = "setMinimumReports";

    public static final String FUNC_SETSTABLETOKEN = "setStableToken";

    public static final String FUNC_SETSPREAD = "setSpread";

    public static final String FUNC_SETRESERVEFRACTION = "setReserveFraction";

    public static final Event BUCKETSUPDATED_EVENT = new Event("BucketsUpdated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event EXCHANGED_EVENT = new Event("Exchanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event MINIMUMREPORTSSET_EVENT = new Event("MinimumReportsSet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event REGISTRYSET_EVENT = new Event("RegistrySet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event RESERVEFRACTIONSET_EVENT = new Event("ReserveFractionSet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event SPREADSET_EVENT = new Event("SpreadSet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event STABLETOKENSET_EVENT = new Event("StableTokenSet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event UPDATEFREQUENCYSET_EVENT = new Event("UpdateFrequencySet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected Exchange(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Exchange(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Exchange(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Exchange(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<BucketsUpdatedEventResponse> getBucketsUpdatedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(BUCKETSUPDATED_EVENT, transactionReceipt);
        ArrayList<BucketsUpdatedEventResponse> responses = new ArrayList<BucketsUpdatedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            BucketsUpdatedEventResponse typedResponse = new BucketsUpdatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.goldBucket = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.stableBucket = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BucketsUpdatedEventResponse> bucketsUpdatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, BucketsUpdatedEventResponse>() {
            @Override
            public BucketsUpdatedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(BUCKETSUPDATED_EVENT, log);
                BucketsUpdatedEventResponse typedResponse = new BucketsUpdatedEventResponse();
                typedResponse.log = log;
                typedResponse.goldBucket = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.stableBucket = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BucketsUpdatedEventResponse> bucketsUpdatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BUCKETSUPDATED_EVENT));
        return bucketsUpdatedEventFlowable(filter);
    }

    public List<ExchangedEventResponse> getExchangedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(EXCHANGED_EVENT, transactionReceipt);
        ArrayList<ExchangedEventResponse> responses = new ArrayList<ExchangedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ExchangedEventResponse typedResponse = new ExchangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.exchanger = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.sellAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.buyAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.soldGold = (Boolean) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ExchangedEventResponse> exchangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ExchangedEventResponse>() {
            @Override
            public ExchangedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(EXCHANGED_EVENT, log);
                ExchangedEventResponse typedResponse = new ExchangedEventResponse();
                typedResponse.log = log;
                typedResponse.exchanger = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.sellAmount = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.buyAmount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.soldGold = (Boolean) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ExchangedEventResponse> exchangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(EXCHANGED_EVENT));
        return exchangedEventFlowable(filter);
    }

    public List<MinimumReportsSetEventResponse> getMinimumReportsSetEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(MINIMUMREPORTSSET_EVENT, transactionReceipt);
        ArrayList<MinimumReportsSetEventResponse> responses = new ArrayList<MinimumReportsSetEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            MinimumReportsSetEventResponse typedResponse = new MinimumReportsSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.minimumReports = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MinimumReportsSetEventResponse> minimumReportsSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, MinimumReportsSetEventResponse>() {
            @Override
            public MinimumReportsSetEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(MINIMUMREPORTSSET_EVENT, log);
                MinimumReportsSetEventResponse typedResponse = new MinimumReportsSetEventResponse();
                typedResponse.log = log;
                typedResponse.minimumReports = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<MinimumReportsSetEventResponse> minimumReportsSetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MINIMUMREPORTSSET_EVENT));
        return minimumReportsSetEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<RegistrySetEventResponse> getRegistrySetEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REGISTRYSET_EVENT, transactionReceipt);
        ArrayList<RegistrySetEventResponse> responses = new ArrayList<RegistrySetEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RegistrySetEventResponse typedResponse = new RegistrySetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.registryAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RegistrySetEventResponse> registrySetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RegistrySetEventResponse>() {
            @Override
            public RegistrySetEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(REGISTRYSET_EVENT, log);
                RegistrySetEventResponse typedResponse = new RegistrySetEventResponse();
                typedResponse.log = log;
                typedResponse.registryAddress = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RegistrySetEventResponse> registrySetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REGISTRYSET_EVENT));
        return registrySetEventFlowable(filter);
    }

    public List<ReserveFractionSetEventResponse> getReserveFractionSetEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(RESERVEFRACTIONSET_EVENT, transactionReceipt);
        ArrayList<ReserveFractionSetEventResponse> responses = new ArrayList<ReserveFractionSetEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ReserveFractionSetEventResponse typedResponse = new ReserveFractionSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.reserveFraction = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ReserveFractionSetEventResponse> reserveFractionSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ReserveFractionSetEventResponse>() {
            @Override
            public ReserveFractionSetEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(RESERVEFRACTIONSET_EVENT, log);
                ReserveFractionSetEventResponse typedResponse = new ReserveFractionSetEventResponse();
                typedResponse.log = log;
                typedResponse.reserveFraction = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ReserveFractionSetEventResponse> reserveFractionSetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RESERVEFRACTIONSET_EVENT));
        return reserveFractionSetEventFlowable(filter);
    }

    public List<SpreadSetEventResponse> getSpreadSetEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(SPREADSET_EVENT, transactionReceipt);
        ArrayList<SpreadSetEventResponse> responses = new ArrayList<SpreadSetEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            SpreadSetEventResponse typedResponse = new SpreadSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.spread = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SpreadSetEventResponse> spreadSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SpreadSetEventResponse>() {
            @Override
            public SpreadSetEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(SPREADSET_EVENT, log);
                SpreadSetEventResponse typedResponse = new SpreadSetEventResponse();
                typedResponse.log = log;
                typedResponse.spread = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SpreadSetEventResponse> spreadSetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SPREADSET_EVENT));
        return spreadSetEventFlowable(filter);
    }

    public List<StableTokenSetEventResponse> getStableTokenSetEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(STABLETOKENSET_EVENT, transactionReceipt);
        ArrayList<StableTokenSetEventResponse> responses = new ArrayList<StableTokenSetEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            StableTokenSetEventResponse typedResponse = new StableTokenSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.stable = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<StableTokenSetEventResponse> stableTokenSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, StableTokenSetEventResponse>() {
            @Override
            public StableTokenSetEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(STABLETOKENSET_EVENT, log);
                StableTokenSetEventResponse typedResponse = new StableTokenSetEventResponse();
                typedResponse.log = log;
                typedResponse.stable = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<StableTokenSetEventResponse> stableTokenSetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(STABLETOKENSET_EVENT));
        return stableTokenSetEventFlowable(filter);
    }

    public List<UpdateFrequencySetEventResponse> getUpdateFrequencySetEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATEFREQUENCYSET_EVENT, transactionReceipt);
        ArrayList<UpdateFrequencySetEventResponse> responses = new ArrayList<UpdateFrequencySetEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            UpdateFrequencySetEventResponse typedResponse = new UpdateFrequencySetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.updateFrequency = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UpdateFrequencySetEventResponse> updateFrequencySetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UpdateFrequencySetEventResponse>() {
            @Override
            public UpdateFrequencySetEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(UPDATEFREQUENCYSET_EVENT, log);
                UpdateFrequencySetEventResponse typedResponse = new UpdateFrequencySetEventResponse();
                typedResponse.log = log;
                typedResponse.updateFrequency = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UpdateFrequencySetEventResponse> updateFrequencySetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPDATEFREQUENCYSET_EVENT));
        return updateFrequencySetEventFlowable(filter);
    }

    public RemoteFunctionCall<BigInteger> goldBucket() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GOLDBUCKET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> initialized() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_INITIALIZED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isOwner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> lastBucketUpdate() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LASTBUCKETUPDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> minimumReports() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MINIMUMREPORTS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> registry() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_REGISTRY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> reserveFraction() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_RESERVEFRACTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> setRegistry(String registryAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETREGISTRY, 
                Arrays.<Type>asList(new Address(registryAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> spread() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SPREAD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> stable() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_STABLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> stableBucket() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_STABLEBUCKET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new Address(newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> updateFrequency() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_UPDATEFREQUENCY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>> getVersionNumber() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETVERSIONNUMBER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple4<BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(String registryAddress, String stableToken, BigInteger _spread, BigInteger _reserveFraction, BigInteger _updateFrequency, BigInteger _minimumReports) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(new Address(registryAddress),
                new Address(stableToken),
                new Uint256(_spread),
                new Uint256(_reserveFraction),
                new Uint256(_updateFrequency),
                new Uint256(_minimumReports)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> sell(BigInteger sellAmount, BigInteger minBuyAmount, Boolean sellGold) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SELL, 
                Arrays.<Type>asList(new Uint256(sellAmount),
                new Uint256(minBuyAmount),
                new Bool(sellGold)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> exchange(BigInteger sellAmount, BigInteger minBuyAmount, Boolean sellGold) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_EXCHANGE, 
                Arrays.<Type>asList(new Uint256(sellAmount),
                new Uint256(minBuyAmount),
                new Bool(sellGold)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> buy(BigInteger buyAmount, BigInteger maxSellAmount, Boolean buyGold) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BUY, 
                Arrays.<Type>asList(new Uint256(buyAmount),
                new Uint256(maxSellAmount),
                new Bool(buyGold)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getBuyTokenAmount(BigInteger sellAmount, Boolean sellGold) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETBUYTOKENAMOUNT, 
                Arrays.<Type>asList(new Uint256(sellAmount),
                new Bool(sellGold)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getSellTokenAmount(BigInteger buyAmount, Boolean sellGold) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETSELLTOKENAMOUNT, 
                Arrays.<Type>asList(new Uint256(buyAmount),
                new Bool(sellGold)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple2<BigInteger, BigInteger>> getBuyAndSellBuckets(Boolean sellGold) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETBUYANDSELLBUCKETS, 
                Arrays.<Type>asList(new Bool(sellGold)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<BigInteger, BigInteger>>(function,
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> setUpdateFrequency(BigInteger newUpdateFrequency) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETUPDATEFREQUENCY, 
                Arrays.<Type>asList(new Uint256(newUpdateFrequency)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setMinimumReports(BigInteger newMininumReports) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETMINIMUMREPORTS, 
                Arrays.<Type>asList(new Uint256(newMininumReports)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setStableToken(String newStableToken) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETSTABLETOKEN, 
                Arrays.<Type>asList(new Address(newStableToken)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setSpread(BigInteger newSpread) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETSPREAD, 
                Arrays.<Type>asList(new Uint256(newSpread)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setReserveFraction(BigInteger newReserveFraction) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETRESERVEFRACTION, 
                Arrays.<Type>asList(new Uint256(newReserveFraction)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static Exchange load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Exchange(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Exchange load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Exchange(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Exchange load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Exchange(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Exchange load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Exchange(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Exchange> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Exchange.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Exchange> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Exchange.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Exchange> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Exchange.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Exchange> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Exchange.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class BucketsUpdatedEventResponse extends BaseEventResponse {
        public BigInteger goldBucket;

        public BigInteger stableBucket;
    }

    public static class ExchangedEventResponse extends BaseEventResponse {
        public String exchanger;

        public BigInteger sellAmount;

        public BigInteger buyAmount;

        public Boolean soldGold;
    }

    public static class MinimumReportsSetEventResponse extends BaseEventResponse {
        public BigInteger minimumReports;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class RegistrySetEventResponse extends BaseEventResponse {
        public String registryAddress;
    }

    public static class ReserveFractionSetEventResponse extends BaseEventResponse {
        public BigInteger reserveFraction;
    }

    public static class SpreadSetEventResponse extends BaseEventResponse {
        public BigInteger spread;
    }

    public static class StableTokenSetEventResponse extends BaseEventResponse {
        public String stable;
    }

    public static class UpdateFrequencySetEventResponse extends BaseEventResponse {
        public BigInteger updateFrequency;
    }
}
