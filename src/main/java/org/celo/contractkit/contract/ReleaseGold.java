package org.celo.contractkit.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.6.1.
 */
@SuppressWarnings({"rawtypes", "unchecked"})
public class ReleaseGold extends Contract {
    public static final String BINARY = "";

    public static final String FUNC_EXPIRATION_TIME = "EXPIRATION_TIME";

    public static final String FUNC_BENEFICIARY = "beneficiary";

    public static final String FUNC_CANVALIDATE = "canValidate";

    public static final String FUNC_CANVOTE = "canVote";

    public static final String FUNC_INITIALIZED = "initialized";

    public static final String FUNC_ISOWNER = "isOwner";

    public static final String FUNC_LIQUIDITYPROVISIONMET = "liquidityProvisionMet";

    public static final String FUNC_MAXDISTRIBUTION = "maxDistribution";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_REFUNDADDRESS = "refundAddress";

    public static final String FUNC_REGISTRY = "registry";

    public static final String FUNC_RELEASEOWNER = "releaseOwner";

    public static final String FUNC_RELEASESCHEDULE = "releaseSchedule";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_REVOCATIONINFO = "revocationInfo";

    public static final String FUNC_SETREGISTRY = "setRegistry";

    public static final String FUNC_TOTALWITHDRAWN = "totalWithdrawn";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_TRANSFER = "transfer";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_ISREVOKED = "isRevoked";

    public static final String FUNC_SETLIQUIDITYPROVISION = "setLiquidityProvision";

    public static final String FUNC_SETCANEXPIRE = "setCanExpire";

    public static final String FUNC_SETMAXDISTRIBUTION = "setMaxDistribution";

    public static final String FUNC_SETBENEFICIARY = "setBeneficiary";

    public static final String FUNC_WITHDRAW = "withdraw";

    public static final String FUNC_REFUNDANDFINALIZE = "refundAndFinalize";

    public static final String FUNC_REVOKE = "revoke";

    public static final String FUNC_EXPIRE = "expire";

    public static final String FUNC_GETTOTALBALANCE = "getTotalBalance";

    public static final String FUNC_GETREMAININGTOTALBALANCE = "getRemainingTotalBalance";

    public static final String FUNC_GETREMAININGUNLOCKEDBALANCE = "getRemainingUnlockedBalance";

    public static final String FUNC_GETREMAININGLOCKEDBALANCE = "getRemainingLockedBalance";

    public static final String FUNC_GETCURRENTRELEASEDTOTALAMOUNT = "getCurrentReleasedTotalAmount";

    public static final String FUNC_LOCKGOLD = "lockGold";

    public static final String FUNC_UNLOCKGOLD = "unlockGold";

    public static final String FUNC_RELOCKGOLD = "relockGold";

    public static final String FUNC_WITHDRAWLOCKEDGOLD = "withdrawLockedGold";

    public static final String FUNC_AUTHORIZEVOTESIGNER = "authorizeVoteSigner";

    public static final String FUNC_AUTHORIZEVALIDATORSIGNER = "authorizeValidatorSigner";

    public static final String FUNC_AUTHORIZEVALIDATORSIGNERWITHPUBLICKEY = "authorizeValidatorSignerWithPublicKey";

    public static final String FUNC_AUTHORIZEVALIDATORSIGNERWITHKEYS = "authorizeValidatorSignerWithKeys";

    public static final String FUNC_AUTHORIZEATTESTATIONSIGNER = "authorizeAttestationSigner";

    public static final String FUNC_SETACCOUNT = "setAccount";

    public static final String FUNC_CREATEACCOUNT = "createAccount";

    public static final String FUNC_SETACCOUNTNAME = "setAccountName";

    public static final String FUNC_SETACCOUNTWALLETADDRESS = "setAccountWalletAddress";

    public static final String FUNC_SETACCOUNTDATAENCRYPTIONKEY = "setAccountDataEncryptionKey";

    public static final String FUNC_SETACCOUNTMETADATAURL = "setAccountMetadataURL";

    public static final String FUNC_REVOKEACTIVE = "revokeActive";

    public static final String FUNC_REVOKEPENDING = "revokePending";

    public static final Event BENEFICIARYSET_EVENT = new Event("BeneficiarySet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event CANEXPIRESET_EVENT = new Event("CanExpireSet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    ;

    public static final Event DISTRIBUTIONLIMITSET_EVENT = new Event("DistributionLimitSet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event LIQUIDITYPROVISIONSET_EVENT = new Event("LiquidityProvisionSet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event REGISTRYSET_EVENT = new Event("RegistrySet", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event RELEASEGOLDINSTANCECREATED_EVENT = new Event("ReleaseGoldInstanceCreated", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event RELEASEGOLDINSTANCEDESTROYED_EVENT = new Event("ReleaseGoldInstanceDestroyed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event RELEASESCHEDULEREVOKED_EVENT = new Event("ReleaseScheduleRevoked", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected ReleaseGold(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected ReleaseGold(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected ReleaseGold(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected ReleaseGold(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<BeneficiarySetEventResponse> getBeneficiarySetEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(BENEFICIARYSET_EVENT, transactionReceipt);
        ArrayList<BeneficiarySetEventResponse> responses = new ArrayList<BeneficiarySetEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            BeneficiarySetEventResponse typedResponse = new BeneficiarySetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.beneficiary = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BeneficiarySetEventResponse> beneficiarySetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, BeneficiarySetEventResponse>() {
            @Override
            public BeneficiarySetEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(BENEFICIARYSET_EVENT, log);
                BeneficiarySetEventResponse typedResponse = new BeneficiarySetEventResponse();
                typedResponse.log = log;
                typedResponse.beneficiary = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BeneficiarySetEventResponse> beneficiarySetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BENEFICIARYSET_EVENT));
        return beneficiarySetEventFlowable(filter);
    }

    public List<CanExpireSetEventResponse> getCanExpireSetEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(CANEXPIRESET_EVENT, transactionReceipt);
        ArrayList<CanExpireSetEventResponse> responses = new ArrayList<CanExpireSetEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            CanExpireSetEventResponse typedResponse = new CanExpireSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.canExpire = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CanExpireSetEventResponse> canExpireSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, CanExpireSetEventResponse>() {
            @Override
            public CanExpireSetEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(CANEXPIRESET_EVENT, log);
                CanExpireSetEventResponse typedResponse = new CanExpireSetEventResponse();
                typedResponse.log = log;
                typedResponse.canExpire = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CanExpireSetEventResponse> canExpireSetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CANEXPIRESET_EVENT));
        return canExpireSetEventFlowable(filter);
    }

    public List<DistributionLimitSetEventResponse> getDistributionLimitSetEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(DISTRIBUTIONLIMITSET_EVENT, transactionReceipt);
        ArrayList<DistributionLimitSetEventResponse> responses = new ArrayList<DistributionLimitSetEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            DistributionLimitSetEventResponse typedResponse = new DistributionLimitSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.beneficiary = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.maxDistribution = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DistributionLimitSetEventResponse> distributionLimitSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DistributionLimitSetEventResponse>() {
            @Override
            public DistributionLimitSetEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(DISTRIBUTIONLIMITSET_EVENT, log);
                DistributionLimitSetEventResponse typedResponse = new DistributionLimitSetEventResponse();
                typedResponse.log = log;
                typedResponse.beneficiary = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.maxDistribution = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DistributionLimitSetEventResponse> distributionLimitSetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DISTRIBUTIONLIMITSET_EVENT));
        return distributionLimitSetEventFlowable(filter);
    }

    public List<LiquidityProvisionSetEventResponse> getLiquidityProvisionSetEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(LIQUIDITYPROVISIONSET_EVENT, transactionReceipt);
        ArrayList<LiquidityProvisionSetEventResponse> responses = new ArrayList<LiquidityProvisionSetEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            LiquidityProvisionSetEventResponse typedResponse = new LiquidityProvisionSetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.beneficiary = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<LiquidityProvisionSetEventResponse> liquidityProvisionSetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, LiquidityProvisionSetEventResponse>() {
            @Override
            public LiquidityProvisionSetEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(LIQUIDITYPROVISIONSET_EVENT, log);
                LiquidityProvisionSetEventResponse typedResponse = new LiquidityProvisionSetEventResponse();
                typedResponse.log = log;
                typedResponse.beneficiary = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<LiquidityProvisionSetEventResponse> liquidityProvisionSetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LIQUIDITYPROVISIONSET_EVENT));
        return liquidityProvisionSetEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<RegistrySetEventResponse> getRegistrySetEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(REGISTRYSET_EVENT, transactionReceipt);
        ArrayList<RegistrySetEventResponse> responses = new ArrayList<RegistrySetEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            RegistrySetEventResponse typedResponse = new RegistrySetEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.registryAddress = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RegistrySetEventResponse> registrySetEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RegistrySetEventResponse>() {
            @Override
            public RegistrySetEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(REGISTRYSET_EVENT, log);
                RegistrySetEventResponse typedResponse = new RegistrySetEventResponse();
                typedResponse.log = log;
                typedResponse.registryAddress = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RegistrySetEventResponse> registrySetEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(REGISTRYSET_EVENT));
        return registrySetEventFlowable(filter);
    }

    public List<ReleaseGoldInstanceCreatedEventResponse> getReleaseGoldInstanceCreatedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(RELEASEGOLDINSTANCECREATED_EVENT, transactionReceipt);
        ArrayList<ReleaseGoldInstanceCreatedEventResponse> responses = new ArrayList<ReleaseGoldInstanceCreatedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ReleaseGoldInstanceCreatedEventResponse typedResponse = new ReleaseGoldInstanceCreatedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.beneficiary = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.atAddress = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ReleaseGoldInstanceCreatedEventResponse> releaseGoldInstanceCreatedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ReleaseGoldInstanceCreatedEventResponse>() {
            @Override
            public ReleaseGoldInstanceCreatedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(RELEASEGOLDINSTANCECREATED_EVENT, log);
                ReleaseGoldInstanceCreatedEventResponse typedResponse = new ReleaseGoldInstanceCreatedEventResponse();
                typedResponse.log = log;
                typedResponse.beneficiary = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.atAddress = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ReleaseGoldInstanceCreatedEventResponse> releaseGoldInstanceCreatedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RELEASEGOLDINSTANCECREATED_EVENT));
        return releaseGoldInstanceCreatedEventFlowable(filter);
    }

    public List<ReleaseGoldInstanceDestroyedEventResponse> getReleaseGoldInstanceDestroyedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(RELEASEGOLDINSTANCEDESTROYED_EVENT, transactionReceipt);
        ArrayList<ReleaseGoldInstanceDestroyedEventResponse> responses = new ArrayList<ReleaseGoldInstanceDestroyedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ReleaseGoldInstanceDestroyedEventResponse typedResponse = new ReleaseGoldInstanceDestroyedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.beneficiary = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.atAddress = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ReleaseGoldInstanceDestroyedEventResponse> releaseGoldInstanceDestroyedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ReleaseGoldInstanceDestroyedEventResponse>() {
            @Override
            public ReleaseGoldInstanceDestroyedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(RELEASEGOLDINSTANCEDESTROYED_EVENT, log);
                ReleaseGoldInstanceDestroyedEventResponse typedResponse = new ReleaseGoldInstanceDestroyedEventResponse();
                typedResponse.log = log;
                typedResponse.beneficiary = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.atAddress = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ReleaseGoldInstanceDestroyedEventResponse> releaseGoldInstanceDestroyedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RELEASEGOLDINSTANCEDESTROYED_EVENT));
        return releaseGoldInstanceDestroyedEventFlowable(filter);
    }

    public List<ReleaseScheduleRevokedEventResponse> getReleaseScheduleRevokedEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = extractEventParametersWithLog(RELEASESCHEDULEREVOKED_EVENT, transactionReceipt);
        ArrayList<ReleaseScheduleRevokedEventResponse> responses = new ArrayList<ReleaseScheduleRevokedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ReleaseScheduleRevokedEventResponse typedResponse = new ReleaseScheduleRevokedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.revokeTimestamp = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.releasedBalanceAtRevoke = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ReleaseScheduleRevokedEventResponse> releaseScheduleRevokedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ReleaseScheduleRevokedEventResponse>() {
            @Override
            public ReleaseScheduleRevokedEventResponse apply(Log log) {
                EventValuesWithLog eventValues = extractEventParametersWithLog(RELEASESCHEDULEREVOKED_EVENT, log);
                ReleaseScheduleRevokedEventResponse typedResponse = new ReleaseScheduleRevokedEventResponse();
                typedResponse.log = log;
                typedResponse.revokeTimestamp = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.releasedBalanceAtRevoke = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ReleaseScheduleRevokedEventResponse> releaseScheduleRevokedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RELEASESCHEDULEREVOKED_EVENT));
        return releaseScheduleRevokedEventFlowable(filter);
    }

    public RemoteFunctionCall<BigInteger> EXPIRATION_TIME() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_EXPIRATION_TIME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> beneficiary() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BENEFICIARY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Boolean> canValidate() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CANVALIDATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> canVote() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CANVOTE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> initialized() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_INITIALIZED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isOwner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> liquidityProvisionMet() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LIQUIDITYPROVISIONMET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> maxDistribution() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MAXDISTRIBUTION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> refundAddress() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_REFUNDADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> registry() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_REGISTRY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<String> releaseOwner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_RELEASEOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>> releaseSchedule() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_RELEASESCHEDULE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<BigInteger, BigInteger, BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple4<Boolean, Boolean, BigInteger, BigInteger>> revocationInfo() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_REVOCATIONINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple4<Boolean, Boolean, BigInteger, BigInteger>>(function,
                new Callable<Tuple4<Boolean, Boolean, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple4<Boolean, Boolean, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<Boolean, Boolean, BigInteger, BigInteger>(
                                (Boolean) results.get(0).getValue(), 
                                (Boolean) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> setRegistry(String registryAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETREGISTRY, 
                Arrays.<Type>asList(new Address(registryAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> totalWithdrawn() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTALWITHDRAWN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new Address(newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transfer(String to, BigInteger value) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFER, 
                Arrays.<Type>asList(new Address(to),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize(BigInteger releaseStartTime, BigInteger releaseCliffTime, BigInteger numReleasePeriods, BigInteger releasePeriod, BigInteger amountReleasedPerPeriod, Boolean revocable, String _beneficiary, String _releaseOwner, String _refundAddress, Boolean subjectToLiquidityProvision, BigInteger initialDistributionRatio, Boolean _canValidate, Boolean _canVote, String registryAddress) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(new Uint256(releaseStartTime),
                new Uint256(releaseCliffTime),
                new Uint256(numReleasePeriods),
                new Uint256(releasePeriod),
                new Uint256(amountReleasedPerPeriod),
                new Bool(revocable),
                new Address(_beneficiary),
                new Address(_releaseOwner),
                new Address(_refundAddress),
                new Bool(subjectToLiquidityProvision),
                new Uint256(initialDistributionRatio),
                new Bool(_canValidate),
                new Bool(_canVote),
                new Address(registryAddress)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> isRevoked() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISREVOKED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> setLiquidityProvision() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETLIQUIDITYPROVISION, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setCanExpire(Boolean _canExpire) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETCANEXPIRE, 
                Arrays.<Type>asList(new Bool(_canExpire)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setMaxDistribution(BigInteger distributionRatio) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETMAXDISTRIBUTION, 
                Arrays.<Type>asList(new Uint256(distributionRatio)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setBeneficiary(String newBeneficiary) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETBENEFICIARY, 
                Arrays.<Type>asList(new Address(newBeneficiary)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdraw(BigInteger amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAW, 
                Arrays.<Type>asList(new Uint256(amount)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> refundAndFinalize() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REFUNDANDFINALIZE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> revoke() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REVOKE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> expire() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_EXPIRE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> getTotalBalance() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETTOTALBALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getRemainingTotalBalance() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETREMAININGTOTALBALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getRemainingUnlockedBalance() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETREMAININGUNLOCKEDBALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getRemainingLockedBalance() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETREMAININGLOCKEDBALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getCurrentReleasedTotalAmount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETCURRENTRELEASEDTOTALAMOUNT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> lockGold(BigInteger value) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_LOCKGOLD, 
                Arrays.<Type>asList(new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unlockGold(BigInteger value) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UNLOCKGOLD, 
                Arrays.<Type>asList(new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> relockGold(BigInteger index, BigInteger value) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RELOCKGOLD, 
                Arrays.<Type>asList(new Uint256(index),
                new Uint256(value)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawLockedGold(BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAWLOCKEDGOLD, 
                Arrays.<Type>asList(new Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> authorizeVoteSigner(String signer, BigInteger v, byte[] r, byte[] s) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_AUTHORIZEVOTESIGNER, 
                Arrays.<Type>asList(new Address(signer),
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> authorizeValidatorSigner(String signer, BigInteger v, byte[] r, byte[] s) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_AUTHORIZEVALIDATORSIGNER, 
                Arrays.<Type>asList(new Address(signer),
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> authorizeValidatorSignerWithPublicKey(String signer, BigInteger v, byte[] r, byte[] s, byte[] ecdsaPublicKey) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_AUTHORIZEVALIDATORSIGNERWITHPUBLICKEY, 
                Arrays.<Type>asList(new Address(signer),
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s), 
                new org.web3j.abi.datatypes.DynamicBytes(ecdsaPublicKey)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> authorizeValidatorSignerWithKeys(String signer, BigInteger v, byte[] r, byte[] s, byte[] ecdsaPublicKey, byte[] blsPublicKey, byte[] blsPop) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_AUTHORIZEVALIDATORSIGNERWITHKEYS, 
                Arrays.<Type>asList(new Address(signer),
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s), 
                new org.web3j.abi.datatypes.DynamicBytes(ecdsaPublicKey), 
                new org.web3j.abi.datatypes.DynamicBytes(blsPublicKey), 
                new org.web3j.abi.datatypes.DynamicBytes(blsPop)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> authorizeAttestationSigner(String signer, BigInteger v, byte[] r, byte[] s) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_AUTHORIZEATTESTATIONSIGNER, 
                Arrays.<Type>asList(new Address(signer),
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setAccount(String name, byte[] dataEncryptionKey, String walletAddress, BigInteger v, byte[] r, byte[] s) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETACCOUNT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name), 
                new org.web3j.abi.datatypes.DynamicBytes(dataEncryptionKey), 
                new Address(walletAddress),
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createAccount() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CREATEACCOUNT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setAccountName(String name) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETACCOUNTNAME, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(name)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setAccountWalletAddress(String walletAddress, BigInteger v, byte[] r, byte[] s) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETACCOUNTWALLETADDRESS, 
                Arrays.<Type>asList(new Address(walletAddress),
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setAccountDataEncryptionKey(byte[] dataEncryptionKey) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETACCOUNTDATAENCRYPTIONKEY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(dataEncryptionKey)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setAccountMetadataURL(String metadataURL) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETACCOUNTMETADATAURL, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(metadataURL)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> revokeActive(String group, BigInteger value, String lesser, String greater, BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REVOKEACTIVE, 
                Arrays.<Type>asList(new Address(group),
                new Uint256(value),
                new Address(lesser),
                new Address(greater),
                new Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> revokePending(String group, BigInteger value, String lesser, String greater, BigInteger index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REVOKEPENDING, 
                Arrays.<Type>asList(new Address(group),
                new Uint256(value),
                new Address(lesser),
                new Address(greater),
                new Uint256(index)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static ReleaseGold load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new ReleaseGold(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static ReleaseGold load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new ReleaseGold(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static ReleaseGold load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new ReleaseGold(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static ReleaseGold load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new ReleaseGold(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<ReleaseGold> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(ReleaseGold.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<ReleaseGold> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(ReleaseGold.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<ReleaseGold> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(ReleaseGold.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<ReleaseGold> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(ReleaseGold.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class BeneficiarySetEventResponse extends BaseEventResponse {
        public String beneficiary;
    }

    public static class CanExpireSetEventResponse extends BaseEventResponse {
        public Boolean canExpire;
    }

    public static class DistributionLimitSetEventResponse extends BaseEventResponse {
        public String beneficiary;

        public BigInteger maxDistribution;
    }

    public static class LiquidityProvisionSetEventResponse extends BaseEventResponse {
        public String beneficiary;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public String previousOwner;

        public String newOwner;
    }

    public static class RegistrySetEventResponse extends BaseEventResponse {
        public String registryAddress;
    }

    public static class ReleaseGoldInstanceCreatedEventResponse extends BaseEventResponse {
        public String beneficiary;

        public String atAddress;
    }

    public static class ReleaseGoldInstanceDestroyedEventResponse extends BaseEventResponse {
        public String beneficiary;

        public String atAddress;
    }

    public static class ReleaseScheduleRevokedEventResponse extends BaseEventResponse {
        public BigInteger revokeTimestamp;

        public BigInteger releasedBalanceAtRevoke;
    }
}
